// Generated by CoffeeScript 1.9.2
(function() {
  var DataSource, DataSourceCSV, ajax, csvParse, isRunningOnBrowser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  DataSource = require('./datasource').DataSource;

  ajax = require('./ajax');

  isRunningOnBrowser = require('./utils').isRunningOnBrowser;

  if (!isRunningOnBrowser) {
    csvParse = require('babyparse');
    DataSourceCSV = (function(superClass) {
      extend(DataSourceCSV, superClass);

      function DataSourceCSV() {
        return DataSourceCSV.__super__.constructor.apply(this, arguments);
      }

      DataSourceCSV.prototype.loadData = function(config) {
        var xhr;
        xhr = ajax.get(this.url, {
          buffer: true
        });
        xhr.done((function(_this) {
          return function(res) {
            var json, parsed;
            parsed = csvParse.parse(res.text, {
              header: true
            });
            json = parsed.data;
            return _this.onDataLoaded(json, _this, config);
          };
        })(this));
        return xhr.fail(function(error) {
          return console.log('error ao baixar CSV', error);
        });
      };

      return DataSourceCSV;

    })(DataSource);
  } else {
    csvParse = Papa;
    DataSourceCSV = (function(superClass) {
      extend(DataSourceCSV, superClass);

      function DataSourceCSV() {
        return DataSourceCSV.__super__.constructor.apply(this, arguments);
      }

      DataSourceCSV.prototype.loadData = function(config) {
        return csvParse.parse(this.url, {
          header: true,
          download: true,
          error: (function(_this) {
            return function() {
              return alert("Erro ao baixar arquivo csv da fonte de dados:\n" + _this.url);
            };
          })(this),
          complete: (function(_this) {
            return function(results, file) {
              return _this.onDataLoaded(results['data'], _this, config);
            };
          })(this)
        });
      };

      return DataSourceCSV;

    })(DataSource);
  }

  module.exports = {
    DataSourceCSV: DataSourceCSV
  };

}).call(this);
