// Generated by CoffeeScript 1.10.0
(function() {
  var Config, ajax, events, utils;

  events = require('./events');

  utils = require('./utils');

  ajax = require('./ajax');

  Config = (function() {
    Config.debug = true;

    Config.EVENT_READY = 'config:ready.slsapi';

    Config.EVENT_FAIL = 'config:fail.slsapi';

    function Config(opcoes) {
      var self, xhr;
      this.id = utils.md5(JSON.stringify(opcoes)) + parseInt(1000 * Math.random());
      this.children = [];
      self = this;
      this.parseOpcoes(opcoes);
      if (opcoes.urlConfServico) {
        xhr = ajax.get(opcoes.urlConfServico);
        xhr.done(function(res) {
          self.parseOpcoes(res.body);
          return events.trigger(self.id, Config.EVENT_READY);
        });
        xhr.fail(function(err) {
          return events.trigger(self.id, Config.EVENT_FAIL, {
            err: err,
            message: 'Error: não foi possível carregar configuração da visualização'
          });
        });
      } else {
        setTimeout((function() {
          return events.trigger(self.id, Config.EVENT_READY);
        }), 5);
      }
    }

    Config.prototype.parseOpcoes = function(opcoes, view) {
      var child, j, len, ref, results;
      this.opcoes = new utils.Dicionario(opcoes);
      this.serverURL = this.opcoes.get('serverURL', this.serverURL || 'http://sl.wancharle.com.br');
      ref = this.children;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        results.push(child.parseOpcoes(this.opcoes));
      }
      return results;
    };

    Config.prototype.register = function(configInstance) {
      if (configInstance.parseOpcoes) {
        configInstance.parseOpcoes(this.opcoes);
      }
      return this.children.push(configInstance);
    };

    Config.prototype.unregister = function(instance) {
      var i;
      i = this.children.indexOf(instance);
      return this.children.splice(i, 1);
    };

    Config.prototype.toJSON = function() {
      var child, j, json, len, ref;
      json = {
        'storageNotebook': this.coletorNotebookId,
        'serverURL': this.serverURL
      };
      ref = this.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        json = utils.merge(json, child.toJSON());
      }
      return JSON.parse(JSON.stringify(json));
    };

    return Config;

  })();

  module.exports = {
    'Config': Config
  };

}).call(this);
