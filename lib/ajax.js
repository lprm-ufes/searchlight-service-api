// Generated by CoffeeScript 1.9.2
(function() {
  var Ajax, CLIENT_SIDE, del, errors, get, getJSON, getJSONP, post, requestPromise;

  if (typeof process.browser === 'undefined') {
    requestPromise = require('request-promise');
    errors = require('request-promise/errors');
    requestPromise.defaults({
      jar: true
    });
    CLIENT_SIDE = false;
  } else {
    CLIENT_SIDE = true;
  }

  Ajax = (function() {
    function Ajax() {
      this.xhr = null;
      this.parseJson = true;
      if (CLIENT_SIDE) {
        $.ajaxSetup({
          crossDomain: true,
          xhrFields: {
            withCredentials: true
          }
        });
      }
    }

    Ajax.prototype.get = function(params) {
      if (CLIENT_SIDE) {
        this.xhr = $.get(params);
      } else {
        this.xhr = requestPromise.get(params);
      }
      return this;
    };

    Ajax.prototype.post = function(params) {
      if (CLIENT_SIDE) {
        if ("data" in params) {
          this.xhr = $.post(params['url'], params['data']);
        } else {
          this.xhr = $.post(params);
        }
      } else {
        if ("data" in params) {
          this.xhr = requestPromise.post({
            url: params['url'],
            formData: params['data']
          });
        } else {
          this.xhr = requestPromise.post(params);
        }
      }
      return this;
    };

    Ajax.prototype["delete"] = function(params) {
      if (CLIENT_SIDE) {
        params.type = "DELETE";
        params.crossDomains = true;
        this.xhr = $.ajax(params);
      } else {
        this.xhr = requestPromise.del(params);
      }
      return this;
    };

    Ajax.prototype.done = function(cb) {
      var cb2, self;
      self = this;
      if (CLIENT_SIDE) {
        return this.xhr.done(cb);
      } else {
        cb2 = function(data) {
          if (self.parseJson) {
            data = JSON.parse(data);
          }
          return cb(data);
        };
        return this.xhr.then(cb2, function() {});
      }
    };

    Ajax.prototype.fail = function(cb) {
      var cb2;
      if (CLIENT_SIDE) {
        cb2 = function(jq) {
          var body, reason, statusCode;
          body = jq.responseJSON || jq.responseText;
          statusCode = jq.status;
          reason = {
            response: {
              body: body,
              statusCode: statusCode
            }
          };
          return cb(reason);
        };
        return this.xhr.fail(cb2);
      } else {
        return this.xhr["catch"](cb);
      }
    };

    return Ajax;

  })();

  get = function(params) {
    return new Ajax().get(params);
  };

  post = function(params) {
    return new Ajax().post(params);
  };

  del = function(params) {
    return new Ajax()["delete"](params);
  };

  getJSONP = function(url, func) {
    var xhr;
    xhr = get({
      'url': url,
      'type': "POST",
      'dataType': 'jsonp'
    });
    xhr.done(func);
    return xhr.fail(function(e, ee) {
      if (ee === "error") {
        return console.log('Erro ao baixar dados JSONP da fonte de dados\n' + url);
      }
    });
  };

  getJSON = function(url, func) {
    var xhr;
    xhr = get({
      'url': url,
      'dataType': "json",
      'contentType': 'application/json',
      'mimeType': "textPlain"
    });
    xhr.done(func);
    return xhr.fail(function() {
      return console.log('Erro ao baixar dados JSONP da fonte de dados\n' + url);
    });
  };

  if (CLIENT_SIDE) {
    window.getJSONP = getJSONP;
    window.getJSON = getJSON;
  }

  module.exports = {
    get: get,
    post: post,
    del: del,
    getJSON: getJSON,
    getJSONP: getJSONP,
    Ajax: Ajax
  };

}).call(this);
