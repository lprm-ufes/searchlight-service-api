// Generated by CoffeeScript 1.9.2
(function() {
  var Ajax, del, get, getJSON, getJSONP, isRunningOnBrowser, post, request;

  isRunningOnBrowser = require('./utils').isRunningOnBrowser;

  request = require('superagent');

  if (!isRunningOnBrowser) {
    request = request.agent();
  }

  Ajax = (function() {
    function Ajax() {
      this.xhr = null;
      this.parseJson = true;
      this.donecb = null;
      this.failcb = null;
      this.request = request;
    }

    Ajax.prototype.get = function(params) {
      this.xhr = this.request.get(params);
      if (isRunningOnBrowser) {
        this.xhr.withCredentials();
      }
      this.xhr.end((function(_this) {
        return function(err, res) {
          return _this.end(err, res);
        };
      })(this));
      return this;
    };

    Ajax.prototype.post = function(params) {
      if ("data" in params) {
        this.xhr = this.request.post(params['url']).send(params['data']);
      } else {
        this.xhr = this.request.post(params);
      }
      if (isRunningOnBrowser) {
        this.xhr.withCredentials();
      }
      this.xhr.end((function(_this) {
        return function(err, res) {
          return _this.end(err, res);
        };
      })(this));
      return this;
    };

    Ajax.prototype.end = function(err, res) {
      if (err) {
        return this.failcb(err);
      } else {
        return this.donecb(res);
      }
    };

    Ajax.prototype["delete"] = function(params) {
      this.xhr = this.request.del(params);
      if (isRunningOnBrowser) {
        this.xhr.withCredentials();
      }
      this.xhr.end((function(_this) {
        return function(err, res) {
          return _this.end(err, res);
        };
      })(this));
      return this;
    };

    Ajax.prototype.done = function(cb) {
      return this.donecb = cb;
    };

    Ajax.prototype.fail = function(cb) {
      return this.failcb = cb;
    };

    return Ajax;

  })();

  get = function(params) {
    return new Ajax().get(params);
  };

  post = function(params) {
    return new Ajax().post(params);
  };

  del = function(params) {
    return new Ajax()["delete"](params);
  };

  getJSONP = function(url, func) {
    var xhr;
    xhr = get({
      'url': url,
      'type': "POST",
      'dataType': 'jsonp'
    });
    xhr.done(func);
    return xhr.fail(function(e, ee) {
      if (ee === "error") {
        return console.log('Erro ao baixar dados JSONP da fonte de dados\n' + url);
      }
    });
  };

  getJSON = function(url, func) {
    var xhr;
    xhr = get({
      'url': url,
      'dataType': "json",
      'contentType': 'application/json',
      'mimeType': "textPlain"
    });
    xhr.done(func);
    return xhr.fail(function() {
      return console.log('Erro ao baixar dados JSONP da fonte de dados\n' + url);
    });
  };

  if (isRunningOnBrowser) {
    window.getJSONP = getJSONP;
    window.getJSON = getJSON;
  }

  module.exports = {
    get: get,
    post: post,
    del: del,
    getJSON: getJSON,
    getJSONP: getJSONP,
    Ajax: Ajax
  };

}).call(this);
