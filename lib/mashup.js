// Generated by CoffeeScript 1.9.2
(function() {
  var Mashup, ajax;

  ajax = require('./ajax');

  Mashup = (function() {
    function Mashup(config) {
      this.config = config;
      this.config.register(this);
    }

    Mashup.prototype.parseOpcoes = function(opcoes) {
      this.opcoes = opcoes;
      this.createURL = this.opcoes.get('mashupCreateURL', this.createURL || (this.config.serverURL + "/mashup/create/"));
      this.readURL = this.opcoes.get('mashupReadURL', this.readURL || (this.config.serverURL + "/mashup/"));
      this.updateURL = this.opcoes.get('mashupUpdateURL', this.updateURL || (this.config.serverURL + "/mashup/update/"));
      this.cacheURL = this.opcoes.get('mashupCacheURL', this.cacheURL || (this.config.serverURL + "/mashup/getCachedURL"));
      this.title = this.opcoes.get('title', this.title || '');
      this.id = this.opcoes.get('id', this.id || '');
      if (this.id) {
        return this.useCache = true;
      } else {
        return this.useCache = false;
      }
    };

    Mashup.prototype.toJSON = function() {
      return {
        'mashupCreateURL': this.createURL,
        'mashupReadURL': this.readURL,
        'mashupUpdateURL': this.updateURL,
        'title': this.title,
        'id': this.id
      };
    };

    Mashup.prototype.get = function(title, user, success, fail) {
      var xhr;
      xhr = ajax.get(this.readURL + "?user=" + user + "&title=" + title);
      xhr.done(function(res) {
        if (res.body.length === 1 && res.body[0].id) {
          return success(res.body[0]);
        } else {
          return fail('mashup not found');
        }
      });
      return xhr.fail(fail);
    };

    Mashup.prototype.create = function(json, success, fail) {
      var xhr;
      xhr = ajax.post({
        url: this.createURL,
        data: json
      });
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('mashup not created');
        }
      });
      return xhr.fail(fail);
    };

    Mashup.prototype.update = function(id, json, success, fail) {
      var xhr;
      xhr = ajax.post({
        url: "" + this.updateURL + id + "/",
        data: json
      });
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('mashup not updated');
        }
      });
      return xhr.fail(fail);
    };

    Mashup.prototype["delete"] = function(id, success, fail) {
      var xhr;
      xhr = ajax.del("" + this.readURL + id + "/");
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('mashup not deleted');
        }
      });
      return xhr.fail(fail);
    };

    Mashup.prototype.save = function(success, fail) {
      var json;
      json = this.config.toJSON();
      if (json.title && json.user) {
        return this.get(json.title, json.user, (function(_this) {
          return function(found) {
            return _this.update(found.id, json, success, fail);
          };
        })(this), (function(_this) {
          return function(err) {
            if (typeof err === 'string' && err === 'mashup not found') {
              return _this.create(json, success, fail);
            } else {
              return fail(err);
            }
          };
        })(this));
      } else {
        return fail("you need a title and logged user to save a mashup");
      }
    };

    return Mashup;

  })();

  module.exports = {
    'Mashup': Mashup
  };

}).call(this);
