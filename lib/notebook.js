// Generated by CoffeeScript 1.10.0
(function() {
  var Notebook, ajax;

  ajax = require('./ajax');

  Notebook = (function() {
    Notebook.instances = {};

    Notebook.getInstance = function(config) {
      return this.instances[config.id];
    };

    Notebook.prototype.parseOpcoes = function(opcoes) {
      this.opcoes = opcoes;
      this.createURL = this.opcoes.get('notebookCreateURL', this.createURL || (this.config.serverURL + "/notebook/create/"));
      this.readURL = this.opcoes.get('notebookReadURL', this.readURL || (this.config.serverURL + "/notebook/"));
      return this.updateURL = this.opcoes.get('notebookUpdateURL', this.updateURL || (this.config.serverURL + "/notebook/update/"));
    };

    Notebook.prototype.toJSON = function() {
      return {
        notebookCreateURL: this.createURL,
        notebookReadURL: this.readURL
      };
    };

    function Notebook(config) {
      Notebook.instances[config.id] = this;
      this.config = config;
      this.config.register(this);
    }

    Notebook.prototype.get = function(callback, callbackFail) {
      var url, xhr;
      if (callbackFail == null) {
        callbackFail = null;
      }
      url = "" + this.readURL;
      xhr = ajax.get(url);
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callbackFail(err);
      });
    };

    Notebook.prototype.getByName = function(notebookName, callback, callbackFail) {
      var url, xhr;
      if (callbackFail == null) {
        callbackFail = null;
      }
      url = this.readURL + "?name=" + notebookName;
      xhr = ajax.get(url);
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callbackFail(err);
      });
    };

    Notebook.prototype.getById = function(notebookId, callback, callbackFail) {
      var url, xhr;
      if (callbackFail == null) {
        callbackFail = null;
      }
      url = this.readURL + "?id=" + notebookId;
      xhr = ajax.get(url);
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callbackFail(err);
      });
    };

    Notebook.prototype.create = function(nbname, success, fail) {
      var xhr;
      xhr = ajax.post({
        url: this.createURL,
        data: {
          name: nbname
        }
      });
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('notebook not created');
        }
      });
      return xhr.fail(fail);
    };

    Notebook.prototype.update = function(id, json, success, fail) {
      var xhr;
      xhr = ajax.post({
        url: "" + this.updateURL + id + "/",
        data: json
      });
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('notebook not updated');
        }
      });
      return xhr.fail(fail);
    };

    Notebook.prototype["delete"] = function(id, success, fail) {
      var xhr;
      xhr = ajax.del("" + this.readURL + id + "/");
      xhr.done(function(res) {
        if (res.body.id) {
          return success(res.body);
        } else {
          return fail('notebook not deleted');
        }
      });
      return xhr.fail(fail);
    };

    return Notebook;

  })();

  module.exports = {
    'Notebook': Notebook
  };

}).call(this);
