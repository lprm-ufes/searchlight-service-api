// Generated by CoffeeScript 1.9.2
(function() {
  var Notes, ajax, events;

  ajax = require('./ajax');

  events = require('./events');

  Notes = (function() {
    Notes.EVENT_ADD_NOTE_START = 'note:uploadStart.slsapi';

    Notes.EVENT_ADD_NOTE_FINISH = 'note:uploadFinish.slsapi';

    Notes.EVENT_ADD_NOTE_FAIL = 'note:uploadFail.slsapi';

    Notes.EVENT_DEL_NOTE_FAIL = 'note:deleteFail.slsapi';

    Notes.EVENT_DEL_NOTE_SUCCESS = 'note:deleteSUCCESS.slsapi';

    Notes.instances = {};

    Notes.getInstance = function(config) {
      return this.instances[config.id];
    };

    function Notes(config1) {
      this.config = config1;
      Notes.instances[this.config.id] = this;
      this.config.register(this);
    }

    Notes.prototype.parseOpcoes = function(opcoes) {
      this.opcoes = opcoes;
      this.createURL = this.opcoes.get('notesCreateURL', this.createURL || (this.config.serverURL + "/note/create/"));
      this.readURL = this.opcoes.get('notesReadURL', this.readURL || (this.config.serverURL + "/note/"));
      this.updateURL = this.opcoes.get('notesUpdateURL', this.updateURL || (this.config.serverURL + "/note/update/"));
      return this.storageNotebook = this.opcoes.get('storageNotebook', '');
    };

    Notes.prototype.toJSON = function() {
      return {
        notesCreateURL: this.createURL,
        notesReadURL: this.readURL,
        notesUpdateURL: this.updateURL,
        storageNotebook: this.storageNotebook
      };
    };

    Notes.prototype.getByUser = function(user_id, callback, callback_fail) {
      var xhr;
      xhr = ajax.get(this.readURL + "?user=" + user_id);
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callback_fail(err);
      });
    };

    Notes.prototype.getByQuery = function(query, callback, callback_fail) {
      var xhr;
      xhr = ajax.get(this.readURL + "?" + query);
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callback_fail(err);
      });
    };

    Notes.prototype.update = function(note_id, queryparams, callback, callback_fail) {
      var xhr;
      xhr = ajax.post({
        url: "" + this.updateURL + note_id + "/",
        data: queryparams
      });
      xhr.done(function(res) {
        return callback(res.body);
      });
      return xhr.fail(function(err) {
        return callback_fail(err);
      });
    };

    Notes.prototype["delete"] = function(note_id, callback) {
      var url, xhr;
      url = "" + this.readURL + note_id;
      xhr = ajax.del(url);
      if (callback) {
        xhr.done(function(data) {
          return callback(data);
        });
      } else {
        xhr.done((function(_this) {
          return function(data) {
            return events.trigger(_this.config.id, Notes.EVENT_DEL_NOTE_SUCCESS, data);
          };
        })(this));
      }
      return xhr.fail((function(_this) {
        return function(err) {
          return events.trigger(_this.config.id, Notes.EVENT_DEL_NOTE_FAIL, err);
        };
      })(this));
    };

    Notes.prototype.enviar = function(note, notebookId, callback_ok, callback_fail) {
      var ft, options, params, xhr;
      if (notebookId == null) {
        notebookId = null;
      }
      if (callback_ok == null) {
        callback_ok = (function() {});
      }
      if (callback_fail == null) {
        callback_fail = (function() {});
      }
      if (!notebookId) {
        if (!this.storageNotebook) {
          console.error('NotebookId n√£o foi informado!');
          return;
        } else {
          notebookId = this.storageNotebook.id;
        }
      }
      params = note;
      params.notebook = notebookId;
      events.trigger(this.config.id, Notes.EVENT_ADD_NOTE_START);
      if (note.fotoURI) {
        options = new FileUploadOptions();
        options.params = params;
        options.fileKey = "foto";
        options.fileName = note.fotoURI.substr(note.fotoURI.lastIndexOf('/') + 1);
        options.mimeType = "image/jpeg";
        options.params.fotoURL = true;
        ft = new FileTransfer();
        return ft.upload(note.fotoURI, encodeURI(this.createURL), (function(_this) {
          return function(r) {
            events.trigger(_this.config.id, Notes.EVENT_ADD_NOTE_FINISH);
            return callback_ok(r);
          };
        })(this), (function(_this) {
          return function(error) {
            events.trigger(_this.config.id, Notes.EVENT_ADD_NOTE_FAIL);
            return callback_fail(error);
          };
        })(this), options);
      } else {
        xhr = ajax.post({
          url: this.createURL,
          data: params
        });
        xhr.done((function(_this) {
          return function(res) {
            events.trigger(_this.config.id, Notes.EVENT_ADD_NOTE_FINISH, res.body);
            return callback_ok(res.body);
          };
        })(this));
        return xhr.fail((function(_this) {
          return function(error) {
            events.trigger(_this.config.id, Notes.EVENT_ADD_NOTE_FAIL, error);
            return callback_fail(error);
          };
        })(this));
      }
    };

    return Notes;

  })();

  module.exports = {
    'Notes': Notes
  };

}).call(this);
