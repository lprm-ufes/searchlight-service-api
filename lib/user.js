// Generated by CoffeeScript 1.9.2
(function() {
  var CLIENT_SIDE, LocalStorage, User, events, localStorage, md5,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof process.browser === 'undefined') {
    md5 = require('blueimp-md5').md5;
    LocalStorage = require('node-localstorage').LocalStorage;
    localStorage = new LocalStorage('./scratch');
    CLIENT_SIDE = false;
  } else {
    CLIENT_SIDE = true;
    localStorage = window.localStorage;
    md5 = window.md5;
  }

  events = require('./events');

  User = (function() {
    User.instances = {};

    User.getInstance = function(config) {
      return this.instances[config.id];
    };

    function User(config1) {
      this.config = config1;
      this.login = bind(this.login, this);
      User.instances[this.config.id] = this;
      this.storage = localStorage;
      this.usuario = this.getUsuario();
    }

    User.prototype.isLogged = function() {
      var tempo_logado, usuario;
      usuario = this.getUsuario();
      if (usuario) {
        tempo_logado = ((new Date()).getTime() - this.logginTime) / 1000;
        if (tempo_logado > 24 * 3600) {
          return false;
        }
        return true;
      } else {
        return false;
      }
    };

    User.prototype.getUsuario = function() {
      this.usuario = this.storage.getItem('Usuario');
      this.user_id = this.storage.getItem('user_id');
      this.logginTime = this.storage.getItem('logginTime');
      return this.usuario;
    };

    User.prototype.setUsuario = function(usuario, json) {
      this.user_id = json.id;
      this.usuario = usuario;
      this.storage.setItem('Usuario', this.usuario);
      this.storage.setItem('user_id', this.user_id);
      return this.storage.setItem('logginTime', (new Date()).getTime());
    };

    User.prototype.logout = function(callback) {
      this.storage.removeItem('Usuario');
      this.usuario = null;
      this.user_id = null;
      return $.get(this.config.logoutURL, callback);
    };

    User.prototype.login = function(u, p) {
      var url;
      if (u && p) {
        url = this.config.loginURL;
        events.trigger(this.config.id, 'slsapi.user:loginStart');
        $.post(url, {
          username: u,
          password: p
        }, (function(_this) {
          return function(json) {
            if (json.error) {
              alert(json.error);
            } else {
              _this.setUsuario(u, json);
              events.trigger(_this.config.id, 'slsapi.user:loginSuccess');
            }
            return events.trigger(_this.config.id, 'slsapi.user:loginFinish');
          };
        })(this), "json").fail((function(_this) {
          return function() {
            return events.trigger(_this.config.id, 'slsapi.user:loginFail');
          };
        })(this));
      }
      return false;
    };

    return User;

  })();

  module.exports = {
    'User': User
  };

}).call(this);
