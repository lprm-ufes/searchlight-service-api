// Generated by CoffeeScript 1.10.0
(function() {
  var CLIENT_SIDE, LocalStorage, User, ajax, events, localStorage, md5,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof process.browser === 'undefined') {
    md5 = require('blueimp-md5').md5;
    LocalStorage = require('node-localstorage').LocalStorage;
    localStorage = new LocalStorage('./scratch');
    CLIENT_SIDE = false;
  } else {
    CLIENT_SIDE = true;
    localStorage = window.localStorage;
    md5 = window.md5;
  }

  events = require('./events');

  ajax = require('./ajax');

  User = (function() {
    User.EVENT_LOGIN_SUCCESS = 'userLoginSuccess.slsapi';

    User.EVENT_LOGIN_START = 'userLoginStart.slsapi';

    User.EVENT_LOGIN_FINISH = 'userLoginFinish.slsapi';

    User.EVENT_LOGIN_FAIL = 'userLoginFail.slsapi';

    User.EVENT_LOGOUT_SUCCESS = 'userLogoutSuccess.slsapi';

    User.EVENT_LOGOUT_FAIL = 'userLogoutFail.slsapi';

    User.instances = {};

    User.getInstance = function() {
      return this.instances[config.id];
    };

    function User(config1) {
      this.config = config1;
      this.login = bind(this.login, this);
      User.instances[this.config.id] = this;
      this.storage = localStorage;
      this.usuario = this.getUsuario();
      if (!this.isLogged()) {
        this.logout(true);
      }
      this.config.register(this);
    }

    User.prototype.parseOpcoes = function(opcoes) {
      this.opcoes = opcoes;
      this.loginURL = this.opcoes.get('loginURL', this.loginURL || (this.config.serverURL + "/user/login/"));
      return this.logoutURL = this.opcoes.get('logoutURL', this.logoutURL || (this.config.serverURL + "/user/logout/"));
    };

    User.prototype.toJSON = function() {
      return {
        loginURL: this.loginURL,
        logoutURL: this.logoutURL,
        user: this.user_id
      };
    };

    User.prototype.isLogged = function() {
      var tempo_logado, usuario;
      usuario = this.getUsuario();
      if (usuario) {
        tempo_logado = ((new Date()).getTime() - this.logginTime) / 1000;
        if (tempo_logado > 24 * 3600) {
          return false;
        }
        return true;
      } else {
        return false;
      }
    };

    User.prototype.getUsuario = function() {
      this.usuario = this.storage.getItem('Usuario');
      this.user_id = this.storage.getItem('user_id');
      this.logginTime = this.storage.getItem('logginTime');
      return this.usuario;
    };

    User.prototype.setUsuario = function(usuario, json) {
      this.user_id = json.id;
      this.usuario = usuario;
      this.storage.setItem('Usuario', this.usuario);
      this.storage.setItem('user_id', this.user_id);
      return this.storage.setItem('logginTime', (new Date()).getTime());
    };

    User.prototype.logout = function(onlyClient) {
      var xhr;
      this.storage.removeItem('Usuario');
      this.usuario = null;
      this.user_id = null;
      if (!onlyClient) {
        xhr = ajax.get(this.logoutURL);
        xhr.done((function(_this) {
          return function(req) {
            return events.trigger(_this.config.id, User.EVENT_LOGOUT_SUCCESS, req);
          };
        })(this));
        return xhr.fail((function(_this) {
          return function(req) {
            return events.trigger(_this.config.id, User.EVENT_LOGOUT_FAIL, req);
          };
        })(this));
      }
    };

    User.prototype.login = function(u, p) {
      var url, xhr;
      if (u && p) {
        url = this.loginURL;
        events.trigger(this.config.id, User.EVENT_LOGIN_START);
        xhr = ajax.post({
          url: url,
          dataType: 'json',
          data: {
            username: u,
            password: p
          }
        });
        xhr.done((function(_this) {
          return function(res) {
            var json;
            json = res.body;
            if (json.error) {
              alert(json.error);
            } else {
              _this.setUsuario(u, json);
              events.trigger(_this.config.id, User.EVENT_LOGIN_SUCCESS, json);
            }
            return events.trigger(_this.config.id, User.EVENT_LOGIN_FINISH, json);
          };
        })(this));
        xhr.fail((function(_this) {
          return function(err) {
            return events.trigger(_this.config.id, User.EVENT_LOGIN_FAIL, err);
          };
        })(this));
      }
      return false;
    };

    return User;

  })();

  module.exports = {
    'User': User
  };

}).call(this);
