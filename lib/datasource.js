// Generated by CoffeeScript 1.9.2
(function() {
  var DataSource, ajax, events, utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  events = require('./events');

  ajax = require('./ajax');

  utils = require('./utils');

  DataSource = (function() {
    function DataSource(url, func_code) {
      this.addItem = bind(this.addItem, this);
      this._getCatOrCreate = bind(this._getCatOrCreate, this);
      var e;
      this.valid = true;
      if (url && typeof func_code === 'function') {
        this.url = url;
        this.func_code = func_code;
      } else {
        if (typeof func_code === 'string') {
          try {
            this.func_code = utils.string2function(func_code);
            this.url = url;
          } catch (_error) {
            e = _error;
            console.error(e, 'Error ao tentar criar funcao de conversao apartir de texto');
            this.valid = false;
          }
        } else {
          console.error("Error de configuração de fonte:", {
            url: url,
            func_code: func_code
          });
          this.valid = false;
        }
      }
      this.notes = [];
      this.notesChildren = {};
      this.categories = {};
      this.categories_id = {};
    }

    DataSource.prototype.isValid = function() {
      return this.valid;
    };

    DataSource.prototype._getCatOrCreate = function(i) {
      var cat;
      cat = this.categories[i.cat];
      if (cat) {
        return cat;
      } else {
        this.categories[i.cat] = [];
        this.categories_id[i.cat] = i.cat_id;
        return this.categories[i.cat];
      }
    };

    DataSource.prototype.addItem = function(i, func_convert) {
      var cat, e, geoItem;
      try {
        geoItem = func_convert(i);
      } catch (_error) {
        e = _error;
        console.error("Erro em Dados::addItem: " + e.message, i);
        geoItem = null;
      }
      if (geoItem) {
        if (!geoItem.id) {
          geoItem.hashid = "" + (parseFloat(geoItem.latitude).toFixed(7)) + (parseFloat(geoItem.longitude).toFixed(7)) + (utils.md5(JSON.stringify(geoItem)));
        } else {
          if (!geoItem.hashid) {
            geoItem.hashid = geoItem.id;
          }
          geoItem.id = void 0;
        }
        this.notes.push(geoItem);
        if (geoItem.id_parent) {
          this.addChild(geoItem.id_parent, geoItem);
        }
        cat = this._getCatOrCreate(geoItem);
        return cat.push(geoItem);
      }
    };

    DataSource.prototype.addChild = function(parentId, child) {
      if (!this.notesChildren[parentId]) {
        this.notesChildren[parentId] = [];
      }
      return this.notesChildren[parentId].push(child);
    };

    DataSource.prototype.loadData = function(config, force) {
      if (force == null) {
        force = false;
      }
      if (config.usarCache && config.noteid) {
        this.loadFromCache(config);
        return;
      }
      if (this.url.indexOf("docs.google.com/spreadsheet") > -1) {
        return this.loadFromGoogle(config);
      } else {
        if (this.url.slice(0, 4) === "http") {
          if (this.url.slice(-4) === ".csv") {
            return this.loadFromCsv(config);
          } else {
            return ajax.getJSONP(this.url, (function(_this) {
              return function(data) {
                return _this.onDataLoaded(data, _this, config);
              };
            })(this));
          }
        } else {
          return ajax.getJSON(this.url, (function(_this) {
            return function(data) {
              return _this.onDataLoaded(data, _this, config);
            };
          })(this));
        }
      }
    };

    DataSource.prototype.onDataLoaded = function(data, fonte, config) {
      var d, e, i, j, len;
      try {
        for (i = j = 0, len = data.length; j < len; i = ++j) {
          d = data[i];
          this.addItem(d, fonte.func_code);
        }
        return events.trigger('slsapi:datasource:load', config.id);
      } catch (_error) {
        e = _error;
        console.error(e.toString());
        events.trigger('slsapi:datasource:loadFail', config.id);
      }
    };

    DataSource.prototype.loadFromCache = function(config) {
      return ajax.getJSON(config.urlsls + "/note/listaExternal?noteid=" + config.noteid + "&fonteIndex=" + i, (function(_this) {
        return function(data) {
          var fonte2;
          fonte2 = {
            url: _this.url,
            func_code: function(i) {
              return i;
            }
          };
          return _this.onDataLoaded(data, fonte2);
        };
      })(this));
    };

    DataSource.prototype.loadFromGoogle = function(config) {
      return Tabletop.init({
        'key': this.url,
        'callback': (function(_this) {
          return function(data) {
            return _this.onDataLoaded(data, _this, config);
          };
        })(this),
        'simpleSheet': true
      });
    };

    DataSource.prototype.loadFromCsv = function() {
      return Papa.parse(this.url, {
        header: true,
        download: true,
        error: function() {
          return alert("Erro ao baixar arquivo csv da fonte de dados:\n" + fonte.url);
        },
        complete: (function(_this) {
          return function(results, file) {
            return _this.onDataLoaded(results['data'], fonte, config);
          };
        })(this)
      });
    };

    return DataSource;

  })();

  module.exports = {
    DataSource: DataSource
  };

}).call(this);
