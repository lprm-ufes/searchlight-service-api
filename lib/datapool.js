// Generated by CoffeeScript 1.9.2
(function() {
  var DataPool, DataSource, DataSourceCSV, DataSourceGoogle, createDataPool, createDataSource, events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  events = require('./events');

  DataSource = require('./datasource').DataSource;

  DataSourceGoogle = require('./datasourceGoogle').DataSourceGoogle;

  DataSourceCSV = require('./datasourceCSV').DataSourceCSV;

  createDataSource = function(url, functionCode, i) {
    if (url.indexOf("docs.google.com/spreadsheet") > -1) {
      return new DataSourceGoogle(url, functionCode, i);
    } else {
      if (url.slice(-4) === ".csv") {
        return new DataSourceCSV(url, functionCode, i);
      } else {
        return new DataSource(url, functionCode, i);
      }
    }
  };

  createDataPool = function(config) {
    var instance;
    instance = DataPool.getInstance(config);
    if (instance) {
      instance.destroy();
    }
    instance = new DataPool();
    instance._constructor(config);
    return instance;
  };

  DataPool = (function() {
    function DataPool() {
      this.loadAllData = bind(this.loadAllData, this);
    }

    DataPool.EVENT_LOAD_START = 'datapool:start.slsapi';

    DataPool.EVENT_LOAD_STOP = 'datapool:stop.slsapi';

    DataPool.instances = {};

    DataPool.getInstance = function(config) {
      return this.instances[config.id];
    };

    DataPool.prototype._constructor = function(config) {
      var dataSources, index, j, len, s;
      DataPool.instances[config.id] = this;
      this.config = config;
      this.dataSources = [];
      dataSources = this.config.dataSources;
      for (index = j = 0, len = dataSources.length; j < len; index = ++j) {
        s = dataSources[index];
        this.addDataSource(s);
      }
      return events.on(config.id, DataSource.EVENT_LOADED, (function(_this) {
        return function() {
          return _this.onDataSourceLoaded();
        };
      })(this));
    };

    DataPool.prototype.addDataSource = function(s) {
      var source;
      source = createDataSource(s.url, s.func_code, this.dataSources.length);
      if (source.isValid()) {
        return this.dataSources.push(source);
      }
    };

    DataPool.prototype.removeDataSource = function(i) {
      return this.dataSources.splice(i, 1);
    };

    DataPool.prototype.getDataSources = function() {
      return this.dataSources;
    };

    DataPool.prototype.updateFonte = function(url, func_code, index) {
      return this.dataSources[index] = createDataSource(url, func_code);
    };

    DataPool.prototype.getDataSource = function(i) {
      return this.dataSources[i];
    };

    DataPool.prototype.loadOneData = function(fonteIndex, force) {
      if (force == null) {
        force = "";
      }
      this.loadingOneData = true;
      events.trigger(this.config.id, DataPool.EVENT_LOAD_START);
      return this.dataSources[fonteIndex].load(this.config, force);
    };

    DataPool.prototype.loadAllData = function(force) {
      var i, j, len, ref, results, source;
      if (force == null) {
        force = "";
      }
      this.sourcesLoaded = 0;
      events.trigger(this.config.id, DataPool.EVENT_LOAD_START);
      ref = this.dataSources;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        source = ref[i];
        results.push(source.load(this.config, force));
      }
      return results;
    };

    DataPool.prototype.toJSON = function() {
      var array, f, i, j, len, ref;
      array = [];
      ref = this.dataSources;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        f = ref[i];
        f.func_code = f.func_code.toString();
        array.push(f);
      }
      return array;
    };

    DataPool.prototype.onDataSourceLoaded = function() {
      if (this.loadingOneData) {
        this.loadingOneData = false;
        events.trigger(this.config.id, DataPool.EVENT_LOAD_STOP, this);
      } else {
        this.sourcesLoaded += 1;
        if (this.sourcesLoaded === this.dataSources.length) {
          return events.trigger(this.config.id, DataPool.EVENT_LOAD_STOP, this);
        }
      }
    };

    DataPool.prototype.destroy = function() {
      events.off(this.config.id, DataSource.EVENT_LOADED);
      events.off(this.config.id, DataPool.EVENT_LOAD_START);
      return events.off(this.config.id, DataPool.EVENT_LOAD_STOP);
    };

    return DataPool;

  })();

  module.exports = {
    DataPool: DataPool,
    createDataPool: createDataPool
  };

}).call(this);
